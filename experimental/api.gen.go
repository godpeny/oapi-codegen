// Package api provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// check whether Acl server is on
	// (GET /acl/api/v1/healthCheck/ping)
	CheckIsAclServerOn(w http.ResponseWriter, r *http.Request)
	// check ip address from MDA api
	// (GET /acl/api/v1/mda/{ip})
	CheckIPFromMDA(w http.ResponseWriter, r *http.Request, ip string)
	// get ACL Request
	// (GET /acl/api/v1/{clusterID})
	ReadACL(w http.ResponseWriter, r *http.Request, clusterID string)
	// create ACL Request
	// (POST /acl/api/v1/{clusterID})
	CreateACL(w http.ResponseWriter, r *http.Request, clusterID string)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
}

type MiddlewareFunc func(http.HandlerFunc) http.HandlerFunc

// CheckIsAclServerOn operation middleware
func (siw *ServerInterfaceWrapper) CheckIsAclServerOn(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CheckIsAclServerOn(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// CheckIPFromMDA operation middleware
func (siw *ServerInterfaceWrapper) CheckIPFromMDA(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "ip" -------------
	var ip string

	err = runtime.BindStyledParameter("simple", false, "ip", chi.URLParam(r, "ip"), &ip)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter ip: %s", err), http.StatusBadRequest)
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CheckIPFromMDA(w, r, ip)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// ReadACL operation middleware
func (siw *ServerInterfaceWrapper) ReadACL(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "clusterID" -------------
	var clusterID string

	err = runtime.BindStyledParameter("simple", false, "clusterID", chi.URLParam(r, "clusterID"), &clusterID)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter clusterID: %s", err), http.StatusBadRequest)
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ReadACL(w, r, clusterID)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// CreateACL operation middleware
func (siw *ServerInterfaceWrapper) CreateACL(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "clusterID" -------------
	var clusterID string

	err = runtime.BindStyledParameter("simple", false, "clusterID", chi.URLParam(r, "clusterID"), &clusterID)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter clusterID: %s", err), http.StatusBadRequest)
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateACL(w, r, clusterID)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL     string
	BaseRouter  chi.Router
	Middlewares []MiddlewareFunc
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
	}

	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/acl/api/v1/healthCheck/ping", wrapper.CheckIsAclServerOn)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/acl/api/v1/mda/{ip}", wrapper.CheckIPFromMDA)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/acl/api/v1/{clusterID}", wrapper.ReadACL)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/acl/api/v1/{clusterID}", wrapper.CreateACL)
	})

	return r
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xUS2/UMBD+K9bAMWq20FNu2wfSqi1FhRuqKuPMJm4T24wnC6so/x2N99E2XWhBouLA",
	"Kcl47M/zPdKD8W3wDh1HKHqIpsZWp9cTokuMwbuI8hnIByS2mBbbWMmDlwGhgMhkXQVDBoRfO4x8bcsd",
	"y0O2qfgvN2hYNiz29071Uj9GME0XGem5J0nJurmX5sYaXN/a6Va6zmefBIwtN/J5K4gZLJCi9Q4K2N+b",
	"7E2kwwd0Olgo4G0qZRA01+lCuTZNroPNF/t5jbrh+qhGc5sHuVHRQ4UsD5lBs/VuVkIBqWUWp6b5iLRA",
	"unAgJK1oTce+mUzSuN4xunQC43fOQ6Otu1NE3mirBgTvqmttGsgeMTNkUGI0ZAOvZpuaRq3AlY3qwsmY",
	"ByvQh42HulRr/VY9B4973ntWc9+5MmkQu7bVtIQCjMypvtXINZISyLiF9DIz6ypC8RmmR2dwJXvv09mW",
	"Ou9tGJ6g8cM78u358RS2Pjv05XLEng6hsSZtzW+iH3H4mnAOBbzK72yfrz2fb6yYOBQAS1hCwdTh8KRo",
	"fw57P2c75Ls4hVSb667hlwI9IfK0U2IblC5LwhjVnHyrzo+nSgJzp7AIdDVIcEi3yEhS7UHcnMIE2SaV",
	"NsCY6Oze/cfOvhq5pl//ImbHPzfOJepSLPcX9Xtgm39UuwpZTY/O1OU63uM8PketLdu/J1oGwcddkSbU",
	"jBtt/qf5pdOc6P+lKYZh+BEAAP//kuiJ6B8IAAA=",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
